name: Deploy App

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      seed_tf_state:
        description: 'Seed the Terraform state?'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pytest
          pip install -r requirements.txt

      - name: Check current directory
        run: |
          pwd
          ls -l

      - name: Run tests
        run: pytest tests/

  build-and-push:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      
      - name: Build Docker image
        run: |
          docker build -t crosswordpuzzle-flask-app .

  seed-state:
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Install jq
        run: sudo apt-get install jq

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Initialize Terraform in bootstrap directory
        run: |
          cd bootstrap 
          terraform init
          terraform apply -auto-approve
          terraform state list

      # Right after applying the Terraform configuration, capture the S3 bucket name.
      - name: Capture S3 Bucket Name - Backend
        id: capture-statemgmt-bucket-name
        run: |
          cd bootstrap
          echo "Terraform Outputs: $(terraform output -json)"
          BACKEND_BUCKET_NAME=$(terraform output -json | python -c "import sys, json; print(json.load(sys.stdin)['s3_statemgmt_bucket_name']['value'])")       
          echo "Captured bucket name: $BACKEND_BUCKET_NAME"
          echo "BACKEND_BUCKET_NAME=$BACKEND_BUCKET_NAME" >> $GITHUB_ENV
          echo "Terraform Outputs: $(terraform output -json)"
        
      - name: Update backend-config.tfvars
        run: |
          echo "aws_backend_bucketname = \"$BACKEND_BUCKET_NAME\"" > backend-config.tfvars
          echo "aws_backend_bucket_key = \"terraform.tfstate\"" >> backend-config.tfvars
          echo "aws_dynamodb_table    = \"terraform_state\"" >> backend-config.tfvars
          echo "aws_region            = \"us-east-1\"" >> backend-config.tfvars

      - name: Capture S3 Bucket Name - Static Files
        id: capture-static-bucket-name
        run: |
          cd bootstrap
          STATIC_FILES_BUCKET_NAME=$(terraform output -json | python -c "import sys, json; print(json.load(sys.stdin)['s3_statemgmt_bucket_name']['value'])")
          echo "Captured static files bucket name: $STATIC_FILES_BUCKET_NAME"
          echo "STATIC_FILES_BUCKET_NAME=$STATIC_FILES_BUCKET_NAME" >> $GITHUB_ENV

      - name: Tag and Push Docker image
        run: |
          docker tag crosswordpuzzle-flask-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/crosswordpuzzle-flask-app:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/crosswordpuzzle-flask-app:latest

  deploy:
    needs: [build-and-push, seed-state]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform with backend
        run: |
          terraform init -backend-config="backend-config.tfvars"

      - name: Upload static files to S3
        run: |
          aws s3 sync app/static s3://$STATIC_FILES_BUCKET_NAME
       
      - name: Deploy infrastructure
        run: terraform apply -auto-approve

      - name: Show Terraform output
        run: terraform output
