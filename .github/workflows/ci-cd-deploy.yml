name: Deploy App

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      seed_tf_state:
        description: 'Seed the Terraform state?'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pytest
          pip install -r requirements.txt

      - name: Check current directory
        run: |
          pwd
          ls -l

      - name: Run tests
        run: pytest tests/

  build-and-push:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        run: $(aws ecr get-login --no-include-email --region us-east-1)

      - name: Build, tag, and push Docker image
        run: |
          docker build -t YOUR_REPO_NAME .
          docker tag YOUR_REPO_NAME:latest YOUR_ECR_URI:latest
          docker push YOUR_ECR_URI:latest

  seed-state:
    runs-on: ubuntu-latest
    if: github.event.inputs.seed_tf_state == 'true' # This checks for a workflow_dispatch input
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Install jq
        run: sudo apt-get install jq

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Initialize Terraform in bootstrap directory
        run: |
          cd bootstrap # assuming this is where your state management setup is
          terraform init
          terraform apply -auto-approve

      # Right after applying the Terraform configuration, capture the S3 bucket name.
      - name: Capture S3 Bucket Name
        id: capture-bucket-name
        run: |
          BUCKET_NAME=$(terraform output -json | jq -r .s3_bucket_name.value)
          echo "Captured bucket name: $BUCKET_NAME"
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Update backend-config.tfvars
        run: |
          echo "aws_backend_bucketname = \"$BUCKET_NAME\"" > backend-config.tfvars
          echo "aws_backend_bucket_key = \"terraform.tfstate\"" >> backend-config.tfvars
          echo "aws_dynamodb_table    = \"terraform_state\"" >> backend-config.tfvars
          echo "aws_region            = \"us-east-1\"" >> backend-config.tfvars
      
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform with backend
        run: |
          terraform init -backend-config="backend-config.tfvars"

      - name: Deploy infrastructure
        run: terraform apply -auto-approve

      - name: Upload static files to S3
        run: |
          aws s3 sync app/static s3://${{ secrets.S3_BUCKET_NAME }}

      - name: Show Terraform output
        run: terraform output
